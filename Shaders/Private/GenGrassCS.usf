#include "/Engine/Public/Platform.ush"

#define MAX_GRASS_STRAWS_1D 50
#define N_TRIANGLES 5
#define GRASS_TYPES 3
#define N_GRASS_VERTICES 7
#define N_GRASS_TRIANGLES 5
#define NumberStrawsX 100
#define NumberStrawsZ 100
#define StrawHeight 5
#define StrawScale 5
#define StrawThickness 10
#define BendStrengthSideways 0.0
#define RandomPositionJitterStrength 0.0
#define ActivePatchDim 100
#define PatchX 14.0f
#define PatchY 14.0f
#define PatchZ 14.0f



struct GrassPara
{
    uint width, height;
};

RWStructuredBuffer<float3> g_outVertexBuffer : register(u0);
RWStructuredBuffer<float3> g_outNormalBuffer : register(u1);
uint4 g_grassPara;


//RWTexture2D<float> OutputTexture;
float2 Dimensions;
float TimeOffset;

uint SeedThread(uint seed)
{
        // Thomas Wang hash 
        // Ref: http://www.burtleburtle.net/bob/hash/integer.html
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}
uint Random(inout uint state)
{
        // Xorshift algorithm from George Marsaglia's paper.
    state ^= (state << 13);
    state ^= (state >> 17);
    state ^= (state << 5);
    return state;
}
float Random01(inout uint state)
{
    return asfloat(0x3f800000 | Random(state) >> 9) - 1.0;
}


static const float GRASS_X[GRASS_TYPES][N_GRASS_VERTICES] =
{
    // Tall straight grass:
    { -0.329877, 0.329877, -0.212571, 0.212571, -0.173286, 0.173286, 0.000000 },
    // Tall bent grass:
    { -0.435275, 0.435275, 0.037324, 0.706106, 1.814639, 2.406257, 3.000000 },
    // Chubby double grass:
    { -1.200000, -0.400000, -0.200000, 0.400000, 0.400000, 1.000000, 1.300000 }
};

static const float GRASS_Y[GRASS_TYPES][N_GRASS_VERTICES] =
{
    // Tall straight grass:
    { 0.000000, 0.000000, 2.490297, 2.490297, 4.847759, 4.847759, 8.000000 },
    // Tall bent grass:
    { 0.000000, 0.000000, 3.691449, 3.691449, 7.022911, 7.022911, 8.000000 },
    // Chubby double grass:
    { 1.800000, 1.000000, 0.000000, 0.000000, 1.800000, 1.800000, 4.000000 }
};
static const uint3 TRIANGLE_INDICES[N_GRASS_TRIANGLES] = { { 0, 2, 1 }, { 1, 2, 3 }, { 2, 4, 3 }, { 3, 4, 5 }, { 4, 6, 5 } };

float rand(float2 co)
{
    float a = 12.9898;
    float b = 78.233;
    float c = 43758.5453;
    float dt = dot(co.xy, float2(a, b));
    float sn = fmod(dt, 3.14);
    return frac(sin(sn) * c);
}

void GenerateGrassStraw(
    in uint baseVertexID, in float2 texCoord, in float3 rootPos, in float3 inNormal,
    in float3 base_u, in float3 base_v, in float grassX[N_GRASS_VERTICES], in float grassY[N_GRASS_VERTICES])
{
    uint RNGState = SeedThread(baseVertexID);
    float2 noiseUV =
    {
        2 * Random01(RNGState) - 1, // [0, 1) -> [-1, 1)
        2 * Random01(RNGState) - 1
    };

    float3 up = float3(0, 0, 1);
    float3 tangent = (noiseUV.x * base_u + noiseUV.y * base_v);
    //float3 tangent = float3(1, 1, 1);
    rootPos = rootPos
            + RandomPositionJitterStrength * tangent
            - 0.001 * StrawHeight * up; // Root it in the ground a bit for bottom vertices not to stick out.
    
    //float2 windCoord = frac(texCoord + cb.p.timeOffset);
    //float3 windNoise = g_windMap.SampleLevel(WrapLinearSampler, windCoord, 0).rbg; // RGB -> RBG
    float3 windNoise = float3(1, 1, 1);
    windNoise = 2 * windNoise - 1; // [0, 1] -> [-1, 1]
    float3 gradient = (0,0,0);
    
    gradient -= up * dot(up, gradient); // Project onto xz-plane.
    float3 nTangent = normalize(tangent);
    gradient -= (1 - BendStrengthSideways) * nTangent * dot(nTangent, gradient); // Restrain bending along tangent.

    float3 vertexPos[N_GRASS_VERTICES];
    for (uint i = 0; i < N_GRASS_VERTICES; i++)
    {
        float bendInterp = pow(grassY[i] / grassY[N_GRASS_VERTICES - 1], 1.5);
        float3 y = StrawScale * StrawHeight * inNormal * grassY[i];
        float3 xz = StrawScale * StrawThickness * (grassX[i] * tangent + bendInterp * gradient);

        vertexPos[i] = rootPos + xz + y;
    }
    
    // Grass straw triangles and vertices:
    //   6
    //   | \
    //   |   5   t4
    //   | / |
    //   4|  |   t3
    //   | \ |
    //   |   3   t2
    //   | / |
    //   2   |   t1
    //   | \ |
    //   0 _ 1   t0
    //

    // Calculate per-face normals
    float3 faceNormals[N_TRIANGLES];
    for (uint t = 0; t < N_TRIANGLES; t++)
    {
        uint3 indices = TRIANGLE_INDICES[t];
        float3 vertices[3] = { vertexPos[indices.x], vertexPos[indices.y], vertexPos[indices.z] };
        faceNormals[t] = normalize(cross(vertices[1] - vertices[0], vertices[2] - vertices[0]));
    }

    // Calculate per-vertex normals
    float3 vertexNormal[N_GRASS_VERTICES] =
    {
        faceNormals[0],
        0.5f * (faceNormals[0] + faceNormals[1]),
        (1.f / 3) * (faceNormals[0] + faceNormals[1] + faceNormals[2]),
        (1.f / 3) * (faceNormals[1] + faceNormals[2] + faceNormals[3]),
        (1.f / 3) * (faceNormals[2] + faceNormals[3] + faceNormals[4]),
        0.5f * (faceNormals[3] + faceNormals[4]),
        faceNormals[4]
    };

    texCoord *= (0.5f * (noiseUV.x + 1)); // [-1, 1] -> [0, 1]

    for (uint v = 0; v < N_GRASS_VERTICES; v++)
    {
        //vertex.textureCoordinate = texCoord;

        g_outVertexBuffer[baseVertexID + v] = vertexPos[v];
        //g_outNormalBuffer[baseVertexID + v] = vertexNormal[v];
        g_outNormalBuffer[baseVertexID + v] = float3(v, v, v);
    }
}



[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, 1)]
void MainComputeShader(uint3 Gid : SV_GroupID, //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
                       uint3 DTid : SV_DispatchThreadID, //atm: 0...256 in rows & columns (XY)   --> "global" thread id
                       uint3 GTid : SV_GroupThreadID, //atm: 0...256, -,- in columns (X)      --> current threadId in group / "local" threadId
                       uint GI : SV_GroupIndex)            //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group)
{
   

    uint threadID = DTid.x + DTid.y * MAX_GRASS_STRAWS_1D;


    float ddu = 1.0f / ActivePatchDim;
    float ddv = 1.0f / ActivePatchDim;
    float3 base_u = ddu * PatchX * float3(1, 0, 0);
    float3 base_v = ddv * PatchZ * float3(0, 0, 1);
    float2 rootUV = float2((DTid.x + 0.5f) * ddu, (DTid.y + 0.5f) * ddv); // Center the uv at the root center.
    //float3 rootPos = float3(PatchX, PatchY, PatchZ) * float3(rootUV.x, rootUV.y, 0);
    float3 rootPos = float3(DTid.x * 5, DTid.y * 5, TimeOffset*10);

    float3 surfaceNormal = float3(0, 0, 1);
    uint baseVertexID = threadID * N_GRASS_VERTICES;

    if (baseVertexID % 7 != 0)
    {
        return;
    }

    uint grassType = dot(DTid & 1, 1) == 1;
    GenerateGrassStraw(baseVertexID, rootUV, rootPos, surfaceNormal, base_u, base_v, GRASS_X[grassType], GRASS_Y[grassType]);

    //if (threadID < 100)
    //{
    //    g_outVertexBuffer[threadID] = float3(threadID, g_grassPara.y, TimeOffset);
    //    g_outNormalBuffer[threadID] = float3(1, threadID, TimeOffset);
    //}
}
